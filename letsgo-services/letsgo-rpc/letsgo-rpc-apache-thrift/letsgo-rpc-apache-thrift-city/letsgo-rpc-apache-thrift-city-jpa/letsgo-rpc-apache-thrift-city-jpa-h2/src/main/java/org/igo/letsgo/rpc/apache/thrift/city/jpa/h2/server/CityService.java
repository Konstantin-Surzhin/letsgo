package org.igo.letsgo.rpc.apache.thrift.city.jpa.h2.server;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author surzhin.konstantin
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-17")
public class CityService {

    /**
     *
     */
    public interface Iface {

        /**
         *
         * @param cityName
         * @return
         * @throws TException
         */
        public int addCity(final String cityName) throws org.apache.thrift.TException;

    }

    /**
     *
     */
    public interface AsyncIface {

        /**
         *
         * @param cityName
         * @param resultHandler
         * @throws TException
         */
        public void addCity(final String cityName, final org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    /**
     *
     */
    public static class Client extends org.apache.thrift.TServiceClient implements Iface {

        /**
         *
         */
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

            /**
             *
             */
            public Factory() {
            }

            /**
             *
             * @param prot
             * @return
             */
            @Override
            public Client getClient(final org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            /**
             *
             * @param iprot
             * @param oprot
             * @return
             */
            @Override
            public Client getClient(final org.apache.thrift.protocol.TProtocol iprot, final org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        /**
         *
         * @param prot
         */
        public Client(final org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        /**
         *
         * @param iprot
         * @param oprot
         */
        public Client(final org.apache.thrift.protocol.TProtocol iprot, final org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        /**
         *
         * @param cityName
         * @return
         * @throws TException
         */
        @Override
        public int addCity(final String cityName) throws org.apache.thrift.TException {
            send_addCity(cityName);
            return recv_addCity();
        }

        /**
         *
         * @param cityName
         * @throws TException
         */
        public void send_addCity(final String cityName) throws org.apache.thrift.TException {
            addCity_args args = new addCity_args();
            args.setCityName(cityName);
            sendBase("addCity", args);
        }

        /**
         *
         * @return
         * @throws TException
         */
        public int recv_addCity() throws org.apache.thrift.TException {
            addCity_result result = new addCity_result();
            receiveBase(result, "addCity");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCity failed: unknown result");
        }

    }

    /**
     *
     */
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {

        /**
         *
         */
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            /**
             *
             * @param clientManager
             * @param protocolFactory
             */
            public Factory(final org.apache.thrift.async.TAsyncClientManager clientManager,final org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            /**
             *
             * @param transport
             * @return
             */
            @Override
            public AsyncClient getAsyncClient(final org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        /**
         *
         * @param protocolFactory
         * @param clientManager
         * @param transport
         */
        public AsyncClient(final org.apache.thrift.protocol.TProtocolFactory protocolFactory, final org.apache.thrift.async.TAsyncClientManager clientManager, final org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        /**
         *
         * @param cityName
         * @param resultHandler
         * @throws TException
         */
        @Override
        public void addCity(String cityName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addCity_call method_call = new addCity_call(cityName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         *
         */
        public static class addCity_call extends org.apache.thrift.async.TAsyncMethodCall {

            private String cityName;

            /**
             *
             * @param cityName
             * @param resultHandler
             * @param client
             * @param protocolFactory
             * @param transport
             * @throws TException
             */
            public addCity_call(String cityName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.cityName = cityName;
            }

            /**
             *
             * @param prot
             * @throws TException
             */
            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCity", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addCity_args args = new addCity_args();
                args.setCityName(cityName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             *
             * @return
             * @throws TException
             */
            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addCity();
            }
        }

    }

    /**
     *
     * @param <I>
     */
    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {

        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        /**
         *
         * @param iface
         */
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        /**
         *
         * @param iface
         * @param processMap
         */
        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("addCity", new addCity());
            return processMap;
        }

        /**
         *
         * @param <I>
         */
        public static class addCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCity_args> {

            /**
             *
             */
            public addCity() {
                super("addCity");
            }

            /**
             *
             * @return
             */
            @Override
            public addCity_args getEmptyArgsInstance() {
                return new addCity_args();
            }

            /**
             *
             * @return
             */
            @Override
            protected boolean isOneway() {
                return false;
            }

            /**
             *
             * @param iface
             * @param args
             * @return
             * @throws TException
             */
            @Override
            public addCity_result getResult(I iface, addCity_args args) throws org.apache.thrift.TException {
                addCity_result result = new addCity_result();
                result.success = iface.addCity(args.cityName);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    /**
     *
     * @param <I>
     */
    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {

        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        /**
         *
         * @param iface
         */
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        /**
         *
         * @param iface
         * @param processMap
         */
        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("addCity", new addCity());
            return processMap;
        }

        /**
         *
         * @param <I>
         */
        public static class addCity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCity_args, Integer> {

            /**
             *
             */
            public addCity() {
                super("addCity");
            }

            /**
             *
             * @return
             */
            @Override
            public addCity_args getEmptyArgsInstance() {
                return new addCity_args();
            }

            /**
             *
             * @param fb
             * @param seqid
             * @return
             */
            @Override
            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    @Override
                    public void onComplete(Integer o) {
                        addCity_result result = new addCity_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    @Override
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        addCity_result result = new addCity_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            /**
             *
             * @return
             */
            @Override
            protected boolean isOneway() {
                return false;
            }

            /**
             *
             * @param iface
             * @param args
             * @param resultHandler
             * @throws TException
             */
            @Override
            public void start(I iface, addCity_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.addCity(args.cityName, resultHandler);
            }
        }

    }

    /**
     *
     */
    public static class addCity_args implements org.apache.thrift.TBase<addCity_args, addCity_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCity_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCity_args");

        private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new addCity_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addCity_argsTupleSchemeFactory());
        }

        /**
         *
         */
        public String cityName; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             *
             */
            CITY_NAME((short) 1, "cityName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                EnumSet.allOf(_Fields.class).forEach((field) -> {
                    byName.put(field.getFieldName(), field);
                });
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             * @param fieldId
             * @return 
             */
            public static _Fields findByThriftId(final int fieldId) {
                switch (fieldId) {
                    case 1: // CITY_NAME
                        return CITY_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             * @param fieldId
             * @return 
             */
            public static _Fields findByThriftIdOrThrow(final int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             * @param name
             * @return 
             */
            public static _Fields findByName(final String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(final short thriftId,final String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             *
             * @return
             */
            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            /**
             *
             * @return
             */
            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments

        /**
         *
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<>(_Fields.class);
            tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCity_args.class, metaDataMap);
        }

        /**
         *
         */
        public addCity_args() {
        }

        /**
         *
         * @param cityName
         */
        public addCity_args(
                String cityName) {
            this();
            this.cityName = cityName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other
         */
        public addCity_args(addCity_args other) {
            if (other.isSetCityName()) {
                this.cityName = other.cityName;
            }
        }

        /**
         *
         * @return
         */
        @Override
        public addCity_args deepCopy() {
            return new addCity_args(this);
        }

        /**
         *
         */
        @Override
        public void clear() {
            this.cityName = null;
        }

        /**
         *
         * @return
         */
        public String getCityName() {
            return this.cityName;
        }

        /**
         *
         * @param cityName
         * @return
         */
        public addCity_args setCityName(String cityName) {
            this.cityName = cityName;
            return this;
        }

        /**
         *
         */
        public void unsetCityName() {
            this.cityName = null;
        }

        /**
         * Returns true if field cityName is set (has been assigned a value) and
         * false otherwise
         * @return 
         */
        public boolean isSetCityName() {
            return this.cityName != null;
        }

        /**
         *
         * @param value
         */
        public void setCityNameIsSet(boolean value) {
            if (!value) {
                this.cityName = null;
            }
        }

        /**
         *
         * @param field
         * @param value
         */
        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CITY_NAME:
                    if (value == null) {
                        unsetCityName();
                    } else {
                        setCityName((String) value);
                    }
                    break;

            }
        }

        /**
         *
         * @param field
         * @return
         */
        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CITY_NAME:
                    return getCityName();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         * @param field
         * @return 
         */
        @Override
        public boolean isSet(final _Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CITY_NAME:
                    return isSetCityName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof addCity_args) {
                return this.equals((addCity_args) that);
            }
            return false;
        }

        /**
         *
         * @param that
         * @return
         */
        public boolean equals(addCity_args that) {
            if (that == null) {
                return false;
            }

            boolean this_present_cityName = true && this.isSetCityName();
            boolean that_present_cityName = true && that.isSetCityName();
            if (this_present_cityName || that_present_cityName) {
                if (!(this_present_cityName && that_present_cityName)) {
                    return false;
                }
                if (!this.cityName.equals(that.cityName)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<>();

            boolean present_cityName = true && (isSetCityName());
            list.add(present_cityName);
            if (present_cityName) {
                list.add(cityName);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(addCity_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCityName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         *
         * @param fieldId
         * @return
         */
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         *
         * @param iprot
         * @throws TException
         */
        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         *
         * @param oprot
         * @throws TException
         */
        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addCity_args(");
           // boolean first = true;

            sb.append("cityName:");
            if (this.cityName == null) {
                sb.append("null");
            } else {
                sb.append(this.cityName);
            }
           // first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         *
         * @throws TException
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addCity_argsStandardSchemeFactory implements SchemeFactory {

            @Override
            public addCity_argsStandardScheme getScheme() {
                return new addCity_argsStandardScheme();
            }
        }

        private static class addCity_argsStandardScheme extends StandardScheme<addCity_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, addCity_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CITY_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.cityName = iprot.readString();
                                struct.setCityNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, addCity_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.cityName != null) {
                    oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
                    oprot.writeString(struct.cityName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCity_argsTupleSchemeFactory implements SchemeFactory {

            @Override
            public addCity_argsTupleScheme getScheme() {
                return new addCity_argsTupleScheme();
            }
        }

        private static class addCity_argsTupleScheme extends TupleScheme<addCity_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCity_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCityName()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCityName()) {
                    oprot.writeString(struct.cityName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCity_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.cityName = iprot.readString();
                    struct.setCityNameIsSet(true);
                }
            }
        }

    }

    /**
     *
     */
    public static class addCity_result implements org.apache.thrift.TBase<addCity_result, addCity_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCity_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCity_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new addCity_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addCity_resultTupleSchemeFactory());
        }

        /**
         *
         */
        public int success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             *
             */
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                EnumSet.allOf(_Fields.class).forEach((field) -> {
                    byName.put(field.getFieldName(), field);
                });
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its
             * not found.
             * @return 
             */
            public static _Fields findByThriftId(final int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             * @param fieldId
             * @return 
             */
            public static _Fields findByThriftIdOrThrow(final int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not
             * found.
             * @param name
             * @return 
             */
            public static _Fields findByName(final String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(final short thriftId, final String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             *
             * @return
             */
            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            /**
             *
             * @return
             */
            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;

        /**
         *
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCity_result.class, metaDataMap);
        }

        /**
         *
         */
        public addCity_result() {
        }

        /**
         *
         * @param success
         */
        public addCity_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other
         */
        public addCity_result(final addCity_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        /**
         *
         * @return
         */
        @Override
        public addCity_result deepCopy() {
            return new addCity_result(this);
        }

        /**
         *
         */
        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        /**
         *
         * @return
         */
        public int getSuccess() {
            return this.success;
        }

        /**
         *
         * @param success
         * @return
         */
        public addCity_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        /**
         *
         */
        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and
         * false otherwise
         * @return 
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         *
         * @param value
         */
        public final void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         *
         * @param field
         * @param value
         */
        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        /**
         *
         * @param field
         * @return
         */
        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         * @param field
         * @return 
         */
        @Override
        public boolean isSet(final _Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof addCity_result) {
                return this.equals((addCity_result) that);
            }
            return false;
        }

        /**
         *
         * @param that
         * @return
         */
        public boolean equals(addCity_result that) {
            if (that == null) {
                return false;
            }

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (this.success != that.success) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
           final List<Object> list = new ArrayList<>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success) {
                list.add(success);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(addCity_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         *
         * @param fieldId
         * @return
         */
        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         *
         * @param iprot
         * @throws TException
         */
        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         *
         * @param oprot
         * @throws TException
         */
        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addCity_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         *
         * @throws TException
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addCity_resultStandardSchemeFactory implements SchemeFactory {

            @Override
            public addCity_resultStandardScheme getScheme() {
                return new addCity_resultStandardScheme();
            }
        }

        private static class addCity_resultStandardScheme extends StandardScheme<addCity_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, addCity_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, addCity_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addCity_resultTupleSchemeFactory implements SchemeFactory {

            @Override
            public addCity_resultTupleScheme getScheme() {
                return new addCity_resultTupleScheme();
            }
        }

        private static class addCity_resultTupleScheme extends TupleScheme<addCity_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addCity_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addCity_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
